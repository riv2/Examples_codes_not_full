<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('php7SmartIdEngine') && !(function_exists('env') && env('APP_ENV') === 'testing') ) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_php7SmartIdEngine.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('php7SmartIdEngine.so')) return;
    } else {
      if (!dl('php7SmartIdEngine.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class php7SmartIdEngine {
	static function new_SWIG_UnsignedCharArray($nelements) {
		return new_SWIG_UnsignedCharArray($nelements);
	}

	static function delete_SWIG_UnsignedCharArray($ary) {
		delete_SWIG_UnsignedCharArray($ary);
	}

	static function SWIG_UnsignedCharArray_getitem($ary,$index) {
		return SWIG_UnsignedCharArray_getitem($ary,$index);
	}

	static function SWIG_UnsignedCharArray_setitem($ary,$index,$value) {
		SWIG_UnsignedCharArray_setitem($ary,$index,$value);
	}

	const Landscape = 0;

	const Portrait = Portrait;

	const InvertedLandscape = InvertedLandscape;

	const InvertedPortrait = InvertedPortrait;
}

/* PHP Proxy Classes */
class Rectangle {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'Rectangle_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'Rectangle_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('Rectangle_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($x=null,$y=null,$width=null,$height=null) {
		if (is_resource($x) && get_resource_type($x) === '_p_se__smartid__Rectangle') {
			$this->_cPtr=$x;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Rectangle(); break;
		case 1: $this->_cPtr=new_Rectangle($x); break;
		case 2: $this->_cPtr=new_Rectangle($x,$y); break;
		case 3: $this->_cPtr=new_Rectangle($x,$y,$width); break;
		default: $this->_cPtr=new_Rectangle($x,$y,$width,$height);
		}
	}
}

class Point {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'x') return Point_x_set($this->_cPtr,$value);
		if ($var === 'y') return Point_y_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'x') return Point_x_get($this->_cPtr);
		if ($var === 'y') return Point_y_get($this->_cPtr);
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('Point_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($x=null,$y=null) {
		if (is_resource($x) && get_resource_type($x) === '_p_se__smartid__Point') {
			$this->_cPtr=$x;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Point(); break;
		case 1: $this->_cPtr=new_Point($x); break;
		default: $this->_cPtr=new_Point($x,$y);
		}
	}
}

class Quadrangle {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($a=null,$b=null,$c_=null,$d=null) {
		if (is_resource($a) && get_resource_type($a) === '_p_se__smartid__Quadrangle') {
			$this->_cPtr=$a;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Quadrangle(); break;
		case 1: $this->_cPtr=new_Quadrangle($a); break;
		case 2: $this->_cPtr=new_Quadrangle($a,$b); break;
		case 3: $this->_cPtr=new_Quadrangle($a,$b,$c_); break;
		default: $this->_cPtr=new_Quadrangle($a,$b,$c_,$d);
		}
	}

	function GetPoint($index) {
		$r=Quadrangle_GetPoint($this->_cPtr,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Point($r);
		}
		return $r;
	}

	function SetPoint($index,$value) {
		Quadrangle_SetPoint($this->_cPtr,$index,$value);
	}

	function GetBoundingRectangle() {
		$r=Quadrangle_GetBoundingRectangle($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Rectangle($r);
		}
		return $r;
	}
}

class Image {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($image_filename_or_data_or_yuv_data_or_copy=null,$data_length_or_yuv_data_length=null,$width=null,$height=null,$stride=null,$channels=null) {
		if (is_resource($image_filename_or_data_or_yuv_data_or_copy) && get_resource_type($image_filename_or_data_or_yuv_data_or_copy) === '_p_se__smartid__Image') {
			$this->_cPtr=$image_filename_or_data_or_yuv_data_or_copy;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Image(); break;
		case 1: $this->_cPtr=new_Image($image_filename_or_data_or_yuv_data_or_copy); break;
		case 2: $this->_cPtr=new_Image($image_filename_or_data_or_yuv_data_or_copy,$data_length_or_yuv_data_length); break;
		case 3: $this->_cPtr=new_Image($image_filename_or_data_or_yuv_data_or_copy,$data_length_or_yuv_data_length,$width); break;
		case 4: $this->_cPtr=new_Image($image_filename_or_data_or_yuv_data_or_copy,$data_length_or_yuv_data_length,$width,$height); break;
		case 5: $this->_cPtr=new_Image($image_filename_or_data_or_yuv_data_or_copy,$data_length_or_yuv_data_length,$width,$height,$stride); break;
		default: $this->_cPtr=new_Image($image_filename_or_data_or_yuv_data_or_copy,$data_length_or_yuv_data_length,$width,$height,$stride,$channels);
		}
	}

	function Save($image_filename) {
		Image_Save($this->_cPtr,$image_filename);
	}

	function GetRequiredBufferLength() {
		return Image_GetRequiredBufferLength($this->_cPtr);
	}

	function CopyToBuffer($out_buffer,$buffer_length) {
		return Image_CopyToBuffer($this->_cPtr,$out_buffer,$buffer_length);
	}

	function EstimateFocusScore($quantile=0.95) {
		return Image_EstimateFocusScore($this->_cPtr,$quantile);
	}

	function GetRequiredBase64BufferLength() {
		return Image_GetRequiredBase64BufferLength($this->_cPtr);
	}

	function CopyBase64ToBuffer($out_buffer,$buffer_length) {
		return Image_CopyBase64ToBuffer($this->_cPtr,$out_buffer,$buffer_length);
	}

	function Clear() {
		Image_Clear($this->_cPtr);
	}

	function GetWidth() {
		return Image_GetWidth($this->_cPtr);
	}

	function GetHeight() {
		return Image_GetHeight($this->_cPtr);
	}

	function GetStride() {
		return Image_GetStride($this->_cPtr);
	}

	function GetChannels() {
		return Image_GetChannels($this->_cPtr);
	}

	function IsMemoryOwner() {
		return Image_IsMemoryOwner($this->_cPtr);
	}

	function ForceMemoryOwner() {
		Image_ForceMemoryOwner($this->_cPtr);
	}

	function Resize($new_width,$new_height) {
		Image_Resize($this->_cPtr,$new_width,$new_height);
	}

	function Crop($quad,$width=null,$height=null) {
		switch (func_num_args()) {
		case 1: Image_Crop($this->_cPtr,$quad); break;
		case 2: Image_Crop($this->_cPtr,$quad,$width); break;
		default: Image_Crop($this->_cPtr,$quad,$width,$height);
		}
	}

	function MaskImageRegionRectangle($rect,$pixel_expand=0) {
		Image_MaskImageRegionRectangle($this->_cPtr,$rect,$pixel_expand);
	}

	function MaskImageRegionQuadrangle($quad,$pixel_expand=0) {
		Image_MaskImageRegionQuadrangle($this->_cPtr,$quad,$pixel_expand);
	}

	function FlipVertical() {
		Image_FlipVertical($this->_cPtr);
	}

	function FlipHorizontal() {
		Image_FlipHorizontal($this->_cPtr);
	}
}

class OcrCharVariant {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($utf16_char_or_utf8_char=null,$confidence=null) {
		if (is_resource($utf16_char_or_utf8_char) && get_resource_type($utf16_char_or_utf8_char) === '_p_se__smartid__OcrCharVariant') {
			$this->_cPtr=$utf16_char_or_utf8_char;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_OcrCharVariant(); break;
		case 1: $this->_cPtr=new_OcrCharVariant($utf16_char_or_utf8_char); break;
		default: $this->_cPtr=new_OcrCharVariant($utf16_char_or_utf8_char,$confidence);
		}
	}

	function GetUtf16Character() {
		return OcrCharVariant_GetUtf16Character($this->_cPtr);
	}

	function GetUtf8Character() {
		return OcrCharVariant_GetUtf8Character($this->_cPtr);
	}

	function GetConfidence() {
		return OcrCharVariant_GetConfidence($this->_cPtr);
	}
}

class OcrChar {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($ocr_char_variants=null,$is_highlighted=null,$is_corrected=null,$ocr_char_rect=null) {
		if (is_resource($ocr_char_variants) && get_resource_type($ocr_char_variants) === '_p_se__smartid__OcrChar') {
			$this->_cPtr=$ocr_char_variants;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_OcrChar(); break;
		case 1: $this->_cPtr=new_OcrChar($ocr_char_variants); break;
		case 2: $this->_cPtr=new_OcrChar($ocr_char_variants,$is_highlighted); break;
		case 3: $this->_cPtr=new_OcrChar($ocr_char_variants,$is_highlighted,$is_corrected); break;
		default: $this->_cPtr=new_OcrChar($ocr_char_variants,$is_highlighted,$is_corrected,$ocr_char_rect);
		}
	}

	function GetOcrCharVariants() {
		$r=OcrChar_GetOcrCharVariants($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new OcrCharVariantVector($r);
		}
		return $r;
	}

	function IsHighlighted() {
		return OcrChar_IsHighlighted($this->_cPtr);
	}

	function IsCorrected() {
		return OcrChar_IsCorrected($this->_cPtr);
	}

	function GetUtf16Character() {
		return OcrChar_GetUtf16Character($this->_cPtr);
	}

	function GetUtf8Character() {
		return OcrChar_GetUtf8Character($this->_cPtr);
	}

	function GetRectangle() {
		$r=OcrChar_GetRectangle($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Rectangle($r);
		}
		return $r;
	}
}

class OcrString {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($ocr_chars_or_utf8_string=null) {
		if (is_resource($ocr_chars_or_utf8_string) && get_resource_type($ocr_chars_or_utf8_string) === '_p_se__smartid__OcrString') {
			$this->_cPtr=$ocr_chars_or_utf8_string;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_OcrString(); break;
		default: $this->_cPtr=new_OcrString($ocr_chars_or_utf8_string);
		}
	}

	function GetOcrChars() {
		$r=OcrString_GetOcrChars($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new OcrCharVector($r);
		}
		return $r;
	}

	function GetUtf8String() {
		return OcrString_GetUtf8String($this->_cPtr);
	}

	function GetUtf16String() {
		$r=OcrString_GetUtf16String($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Utf16CharVector($r);
		}
		return $r;
	}
}

class StringField {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($name=null,$value=null,$is_accepted=null,$confidence=null,$attributes=null) {
		if (is_resource($name) && get_resource_type($name) === '_p_se__smartid__StringField') {
			$this->_cPtr=$name;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringField(); break;
		case 1: $this->_cPtr=new_StringField($name); break;
		case 2: $this->_cPtr=new_StringField($name,$value); break;
		case 3: $this->_cPtr=new_StringField($name,$value,$is_accepted); break;
		case 4: $this->_cPtr=new_StringField($name,$value,$is_accepted,$confidence); break;
		default: $this->_cPtr=new_StringField($name,$value,$is_accepted,$confidence,$attributes);
		}
	}

	function GetName() {
		return StringField_GetName($this->_cPtr);
	}

	function GetValue() {
		$r=StringField_GetValue($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new OcrString($r);
		}
		return $r;
	}

	function GetUtf8Value() {
		return StringField_GetUtf8Value($this->_cPtr);
	}

	function IsAccepted() {
		return StringField_IsAccepted($this->_cPtr);
	}

	function GetConfidence() {
		return StringField_GetConfidence($this->_cPtr);
	}

	function GetAttributeNames() {
		$r=StringField_GetAttributeNames($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function GetAttributes() {
		$r=StringField_GetAttributes($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringCollection($r);
		}
		return $r;
	}

	function HasAttribute($attribute_name) {
		return StringField_HasAttribute($this->_cPtr,$attribute_name);
	}

	function GetAttribute($attribute_name) {
		return StringField_GetAttribute($this->_cPtr,$attribute_name);
	}
}

class ImageField {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($name=null,$value=null,$is_accepted=null,$confidence=null) {
		if (is_resource($name) && get_resource_type($name) === '_p_se__smartid__ImageField') {
			$this->_cPtr=$name;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_ImageField(); break;
		case 1: $this->_cPtr=new_ImageField($name); break;
		case 2: $this->_cPtr=new_ImageField($name,$value); break;
		case 3: $this->_cPtr=new_ImageField($name,$value,$is_accepted); break;
		default: $this->_cPtr=new_ImageField($name,$value,$is_accepted,$confidence);
		}
	}

	function GetName() {
		return ImageField_GetName($this->_cPtr);
	}

	function GetValue() {
		$r=ImageField_GetValue($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Image($r);
		}
		return $r;
	}

	function IsAccepted() {
		return ImageField_IsAccepted($this->_cPtr);
	}

	function GetConfidence() {
		return ImageField_GetConfidence($this->_cPtr);
	}
}

class MatchResult {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($tpl_type=null,$quadrangle=null,$accepted=false,$confidence=0.0,$standard_width=0,$standard_height=0) {
		if (is_resource($tpl_type) && get_resource_type($tpl_type) === '_p_se__smartid__MatchResult') {
			$this->_cPtr=$tpl_type;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_MatchResult(); break;
		case 1: $this->_cPtr=new_MatchResult($tpl_type); break;
		default: $this->_cPtr=new_MatchResult($tpl_type,$quadrangle,$accepted,$confidence,$standard_width,$standard_height);
		}
	}

	function GetTemplateType() {
		return MatchResult_GetTemplateType($this->_cPtr);
	}

	function GetQuadrangle() {
		$r=MatchResult_GetQuadrangle($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Quadrangle($r);
		}
		return $r;
	}

	function GetStandardWidth() {
		return MatchResult_GetStandardWidth($this->_cPtr);
	}

	function GetStandardHeight() {
		return MatchResult_GetStandardHeight($this->_cPtr);
	}

	function GetAccepted() {
		return MatchResult_GetAccepted($this->_cPtr);
	}

	function GetConfidence() {
		return MatchResult_GetConfidence($this->_cPtr);
	}
}

class SegmentationResult {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($raw_fields_quadrangles=null,$raw_fields_template_quadrangles=null,$accepted=false) {
		if (is_resource($raw_fields_quadrangles) && get_resource_type($raw_fields_quadrangles) === '_p_se__smartid__SegmentationResult') {
			$this->_cPtr=$raw_fields_quadrangles;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_SegmentationResult(); break;
		case 1: $this->_cPtr=new_SegmentationResult($raw_fields_quadrangles); break;
		default: $this->_cPtr=new_SegmentationResult($raw_fields_quadrangles,$raw_fields_template_quadrangles,$accepted);
		}
	}

	function GetRawFieldsNames() {
		$r=SegmentationResult_GetRawFieldsNames($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function HasRawFieldQuadrangle($raw_field_name) {
		return SegmentationResult_HasRawFieldQuadrangle($this->_cPtr,$raw_field_name);
	}

	function GetRawFieldQuadrangle($raw_field_name) {
		$r=SegmentationResult_GetRawFieldQuadrangle($this->_cPtr,$raw_field_name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Quadrangle($r);
		}
		return $r;
	}

	function GetRawFieldQuadrangles() {
		$r=SegmentationResult_GetRawFieldQuadrangles($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new QuadrangleCollection($r);
		}
		return $r;
	}

	function GetRawFieldTemplateQuadrangle($raw_field_name) {
		$r=SegmentationResult_GetRawFieldTemplateQuadrangle($this->_cPtr,$raw_field_name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Quadrangle($r);
		}
		return $r;
	}

	function GetRawFieldTemplateQuadrangles() {
		$r=SegmentationResult_GetRawFieldTemplateQuadrangles($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new QuadrangleCollection($r);
		}
		return $r;
	}

	function GetAccepted() {
		return SegmentationResult_GetAccepted($this->_cPtr);
	}
}

class RecognitionResult {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($string_fields=null,$image_fields=null,$raw_string_fields=null,$raw_image_fields=null,$document_type=null,$match_results=null,$segmentation_results=null,$is_terminal=null) {
		if (is_resource($string_fields) && get_resource_type($string_fields) === '_p_se__smartid__RecognitionResult') {
			$this->_cPtr=$string_fields;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_RecognitionResult(); break;
		case 1: $this->_cPtr=new_RecognitionResult($string_fields); break;
		case 2: $this->_cPtr=new_RecognitionResult($string_fields,$image_fields); break;
		case 3: $this->_cPtr=new_RecognitionResult($string_fields,$image_fields,$raw_string_fields); break;
		case 4: $this->_cPtr=new_RecognitionResult($string_fields,$image_fields,$raw_string_fields,$raw_image_fields); break;
		case 5: $this->_cPtr=new_RecognitionResult($string_fields,$image_fields,$raw_string_fields,$raw_image_fields,$document_type); break;
		case 6: $this->_cPtr=new_RecognitionResult($string_fields,$image_fields,$raw_string_fields,$raw_image_fields,$document_type,$match_results); break;
		case 7: $this->_cPtr=new_RecognitionResult($string_fields,$image_fields,$raw_string_fields,$raw_image_fields,$document_type,$match_results,$segmentation_results); break;
		default: $this->_cPtr=new_RecognitionResult($string_fields,$image_fields,$raw_string_fields,$raw_image_fields,$document_type,$match_results,$segmentation_results,$is_terminal);
		}
	}

	function GetStringFieldNames() {
		$r=RecognitionResult_GetStringFieldNames($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function HasStringField($name) {
		return RecognitionResult_HasStringField($this->_cPtr,$name);
	}

	function GetStringField($name) {
		$r=RecognitionResult_GetStringField($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringField($r);
		}
		return $r;
	}

	function GetStringFields() {
		$r=RecognitionResult_GetStringFields($this->_cPtr);
		if (!is_resource($r)) return $r;
		return new StringFieldCollection($r);
	}

	function SetStringFields($string_fields) {
		RecognitionResult_SetStringFields($this->_cPtr,$string_fields);
	}

	function GetImageFieldNames() {
		$r=RecognitionResult_GetImageFieldNames($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function HasImageField($name) {
		return RecognitionResult_HasImageField($this->_cPtr,$name);
	}

	function GetImageField($name) {
		$r=RecognitionResult_GetImageField($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new ImageField($r);
		}
		return $r;
	}

	function GetImageFields() {
		$r=RecognitionResult_GetImageFields($this->_cPtr);
		if (!is_resource($r)) return $r;
		return new ImageFieldCollection($r);
	}

	function SetImageFields($image_fields) {
		RecognitionResult_SetImageFields($this->_cPtr,$image_fields);
	}

	function GetRawStringFieldNames() {
		$r=RecognitionResult_GetRawStringFieldNames($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function HasRawStringField($name) {
		return RecognitionResult_HasRawStringField($this->_cPtr,$name);
	}

	function GetRawStringField($name) {
		$r=RecognitionResult_GetRawStringField($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringField($r);
		}
		return $r;
	}

	function GetRawStringFields() {
		$r=RecognitionResult_GetRawStringFields($this->_cPtr);
		if (!is_resource($r)) return $r;
		return new StringFieldCollection($r);
	}

	function SetRawStringFields($raw_string_fields) {
		RecognitionResult_SetRawStringFields($this->_cPtr,$raw_string_fields);
	}

	function GetRawImageFieldNames() {
		$r=RecognitionResult_GetRawImageFieldNames($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function HasRawImageField($name) {
		return RecognitionResult_HasRawImageField($this->_cPtr,$name);
	}

	function GetRawImageField($name) {
		$r=RecognitionResult_GetRawImageField($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new ImageField($r);
		}
		return $r;
	}

	function GetRawImageFields() {
		$r=RecognitionResult_GetRawImageFields($this->_cPtr);
		if (!is_resource($r)) return $r;
		return new ImageFieldCollection($r);
	}

	function SetRawImageFields($raw_image_fields) {
		RecognitionResult_SetRawImageFields($this->_cPtr,$raw_image_fields);
	}

	function GetDocumentType() {
		return RecognitionResult_GetDocumentType($this->_cPtr);
	}

	function SetDocumentType($doctype) {
		RecognitionResult_SetDocumentType($this->_cPtr,$doctype);
	}

	function GetMatchResults() {
		$r=RecognitionResult_GetMatchResults($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new MatchResultVector($r);
		}
		return $r;
	}

	function SetMatchResults($match_results) {
		RecognitionResult_SetMatchResults($this->_cPtr,$match_results);
	}

	function GetSegmentationResults() {
		$r=RecognitionResult_GetSegmentationResults($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new SegmentationResultVector($r);
		}
		return $r;
	}

	function SetSegmentationResults($segmentation_results) {
		RecognitionResult_SetSegmentationResults($this->_cPtr,$segmentation_results);
	}

	function IsTerminal() {
		return RecognitionResult_IsTerminal($this->_cPtr);
	}

	function SetIsTerminal($is_terminal) {
		RecognitionResult_SetIsTerminal($this->_cPtr,$is_terminal);
	}
}

class ProcessingFeedback {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($quadrangles=null) {
		if (is_resource($quadrangles) && get_resource_type($quadrangles) === '_p_se__smartid__ProcessingFeedback') {
			$this->_cPtr=$quadrangles;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_ProcessingFeedback(); break;
		default: $this->_cPtr=new_ProcessingFeedback($quadrangles);
		}
	}

	function GetQuadrangles() {
		$r=ProcessingFeedback_GetQuadrangles($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new QuadrangleCollection($r);
		}
		return $r;
	}
}

abstract class ResultReporterInterface {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function SnapshotRejected() {
		ResultReporterInterface_SnapshotRejected($this->_cPtr);
	}

	function FeedbackReceived($processing_feedback) {
		ResultReporterInterface_FeedbackReceived($this->_cPtr,$processing_feedback);
	}

	function DocumentMatched($match_results) {
		ResultReporterInterface_DocumentMatched($this->_cPtr,$match_results);
	}

	function DocumentSegmented($segmentation_results) {
		ResultReporterInterface_DocumentSegmented($this->_cPtr,$segmentation_results);
	}

	function SnapshotProcessed($recog_result) {
		ResultReporterInterface_SnapshotProcessed($this->_cPtr,$recog_result);
	}

	function SessionEnded() {
		ResultReporterInterface_SessionEnded($this->_cPtr);
	}
}

class IntegratedFieldState {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($is_terminal=false) {
		if (is_resource($is_terminal) && get_resource_type($is_terminal) === '_p_se__smartid__IntegratedFieldState') {
			$this->_cPtr=$is_terminal;
			return;
		}
		$this->_cPtr=new_IntegratedFieldState($is_terminal);
	}

	function IsTerminal() {
		return IntegratedFieldState_IsTerminal($this->_cPtr);
	}

	function SetIsTerminal($is_terminal) {
		IntegratedFieldState_SetIsTerminal($this->_cPtr,$is_terminal);
	}
}

class SessionState {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function GetIntegratedFieldStateNames() {
		$r=SessionState_GetIntegratedFieldStateNames($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function HasIntegratedFieldState($name) {
		return SessionState_HasIntegratedFieldState($this->_cPtr,$name);
	}

	function GetStringFieldState($name) {
		$r=SessionState_GetStringFieldState($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntegratedFieldState($r);
		}
		return $r;
	}

	function SetIntegratedFieldStates($integrated_field_states) {
		SessionState_SetIntegratedFieldStates($this->_cPtr,$integrated_field_states);
	}

	function GetSnapshotsProcessed() {
		return SessionState_GetSnapshotsProcessed($this->_cPtr);
	}
}

class SessionSettings {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function CloneSessionSettings() {
		$r=SessionSettings_CloneSessionSettings($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}

	function GetEnabledDocumentTypes() {
		$r=SessionSettings_GetEnabledDocumentTypes($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function AddEnabledDocumentTypes($doctype_mask) {
		SessionSettings_AddEnabledDocumentTypes($this->_cPtr,$doctype_mask);
	}

	function RemoveEnabledDocumentTypes($doctype_mask) {
		SessionSettings_RemoveEnabledDocumentTypes($this->_cPtr,$doctype_mask);
	}

	function SetEnabledDocumentTypes($document_types) {
		SessionSettings_SetEnabledDocumentTypes($this->_cPtr,$document_types);
	}

	function GetSupportedDocumentTypes() {
		$r=SessionSettings_GetSupportedDocumentTypes($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector2d($r);
		}
		return $r;
	}

	function GetOptionNames() {
		$r=SessionSettings_GetOptionNames($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function HasOption($name) {
		return SessionSettings_HasOption($this->_cPtr,$name);
	}

	function GetOption($name) {
		return SessionSettings_GetOption($this->_cPtr,$name);
	}

	function SetOption($name,$value) {
		SessionSettings_SetOption($this->_cPtr,$name,$value);
	}

	function RemoveOption($name) {
		SessionSettings_RemoveOption($this->_cPtr,$name);
	}

	function GetEnabledFieldNames() {
		$r=SessionSettings_GetEnabledFieldNames($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVectorCollection($r);
		}
		return $r;
	}

	function EnableField($doctype,$field_name) {
		SessionSettings_EnableField($this->_cPtr,$doctype,$field_name);
	}

	function DisableField($doctype,$field_name) {
		SessionSettings_DisableField($this->_cPtr,$doctype,$field_name);
	}

	function SetEnabledFields($doctype,$field_names) {
		SessionSettings_SetEnabledFields($this->_cPtr,$doctype,$field_names);
	}

	function GetSupportedFieldNames($doctype) {
		$r=SessionSettings_GetSupportedFieldNames($this->_cPtr,$doctype);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function GetCurrentMode() {
		return SessionSettings_GetCurrentMode($this->_cPtr);
	}

	function SetCurrentMode($mode) {
		SessionSettings_SetCurrentMode($this->_cPtr,$mode);
	}

	function GetAvailableModes() {
		$r=SessionSettings_GetAvailableModes($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}
}

class RecognitionSession {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function ProcessSnapshot($data,$data_length,$width,$height,$stride,$channels,$roi_or_image_orientation=null,$image_orientation=null) {
		switch (func_num_args()) {
		case 6: $r=RecognitionSession_ProcessSnapshot($this->_cPtr,$data,$data_length,$width,$height,$stride,$channels); break;
		case 7: $r=RecognitionSession_ProcessSnapshot($this->_cPtr,$data,$data_length,$width,$height,$stride,$channels,$roi_or_image_orientation); break;
		default: $r=RecognitionSession_ProcessSnapshot($this->_cPtr,$data,$data_length,$width,$height,$stride,$channels,$roi_or_image_orientation,$image_orientation);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RecognitionResult($r);
		}
		return $r;
	}

	function ProcessYUVSnapshot($yuv_data,$yuv_data_length,$width,$height,$roi_or_image_orientation=null,$image_orientation=null) {
		switch (func_num_args()) {
		case 4: $r=RecognitionSession_ProcessYUVSnapshot($this->_cPtr,$yuv_data,$yuv_data_length,$width,$height); break;
		case 5: $r=RecognitionSession_ProcessYUVSnapshot($this->_cPtr,$yuv_data,$yuv_data_length,$width,$height,$roi_or_image_orientation); break;
		default: $r=RecognitionSession_ProcessYUVSnapshot($this->_cPtr,$yuv_data,$yuv_data_length,$width,$height,$roi_or_image_orientation,$image_orientation);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RecognitionResult($r);
		}
		return $r;
	}

	function ProcessImage($image,$roi_or_image_orientation=null,$image_orientation=null) {
		switch (func_num_args()) {
		case 1: $r=RecognitionSession_ProcessImage($this->_cPtr,$image); break;
		case 2: $r=RecognitionSession_ProcessImage($this->_cPtr,$image,$roi_or_image_orientation); break;
		default: $r=RecognitionSession_ProcessImage($this->_cPtr,$image,$roi_or_image_orientation,$image_orientation);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RecognitionResult($r);
		}
		return $r;
	}

	function ProcessImageFile($image_file,$roi_or_image_orientation=null,$image_orientation=null) {
		switch (func_num_args()) {
		case 1: $r=RecognitionSession_ProcessImageFile($this->_cPtr,$image_file); break;
		case 2: $r=RecognitionSession_ProcessImageFile($this->_cPtr,$image_file,$roi_or_image_orientation); break;
		default: $r=RecognitionSession_ProcessImageFile($this->_cPtr,$image_file,$roi_or_image_orientation,$image_orientation);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RecognitionResult($r);
		}
		return $r;
	}

	function ProcessImageData($data,$data_length,$roi_or_image_orientation=null,$image_orientation=null) {
		switch (func_num_args()) {
		case 2: $r=RecognitionSession_ProcessImageData($this->_cPtr,$data,$data_length); break;
		case 3: $r=RecognitionSession_ProcessImageData($this->_cPtr,$data,$data_length,$roi_or_image_orientation); break;
		default: $r=RecognitionSession_ProcessImageData($this->_cPtr,$data,$data_length,$roi_or_image_orientation,$image_orientation);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RecognitionResult($r);
		}
		return $r;
	}

	function ProcessImageDataBase64($base64_image_data,$roi_or_image_orientation=null,$image_orientation=null) {
		switch (func_num_args()) {
		case 1: $r=RecognitionSession_ProcessImageDataBase64($this->_cPtr,$base64_image_data); break;
		case 2: $r=RecognitionSession_ProcessImageDataBase64($this->_cPtr,$base64_image_data,$roi_or_image_orientation); break;
		default: $r=RecognitionSession_ProcessImageDataBase64($this->_cPtr,$base64_image_data,$roi_or_image_orientation,$image_orientation);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RecognitionResult($r);
		}
		return $r;
	}

	function GetSessionState() {
		$r=RecognitionSession_GetSessionState($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new SessionState($r);
		}
		return $r;
	}

	function Reset() {
		RecognitionSession_Reset($this->_cPtr);
	}
}

class RecognitionEngine {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($config_path_or_config_data,$lazy_configuration_or_data_length=null,$lazy_configuration=null) {
		if (is_resource($config_path_or_config_data) && get_resource_type($config_path_or_config_data) === '_p_se__smartid__RecognitionEngine') {
			$this->_cPtr=$config_path_or_config_data;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_RecognitionEngine($config_path_or_config_data); break;
		case 2: $this->_cPtr=new_RecognitionEngine($config_path_or_config_data,$lazy_configuration_or_data_length); break;
		default: $this->_cPtr=new_RecognitionEngine($config_path_or_config_data,$lazy_configuration_or_data_length,$lazy_configuration);
		}
	}

	function CreateSessionSettings() {
		$r=RecognitionEngine_CreateSessionSettings($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new SessionSettings($r);
		}
		return $r;
	}

	function SpawnSession($session_settings,$result_reporter=null) {
		$r=RecognitionEngine_SpawnSession($this->_cPtr,$session_settings,$result_reporter);
		if (!is_resource($r)) return $r;
		return new RecognitionSession($r);
	}

	static function GetVersion() {
		return RecognitionEngine_GetVersion();
	}
}

class Utf16CharVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_unsigned_short_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Utf16CharVector(); break;
		default: $this->_cPtr=new_Utf16CharVector($n);
		}
	}

	function size() {
		return Utf16CharVector_size($this->_cPtr);
	}

	function capacity() {
		return Utf16CharVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		Utf16CharVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		Utf16CharVector_clear($this->_cPtr);
	}

	function push($x) {
		Utf16CharVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return Utf16CharVector_is_empty($this->_cPtr);
	}

	function pop() {
		return Utf16CharVector_pop($this->_cPtr);
	}

	function get($i) {
		return Utf16CharVector_get($this->_cPtr,$i);
	}

	function set($i,$val) {
		Utf16CharVector_set($this->_cPtr,$i,$val);
	}
}

class StringVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_std__string_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringVector(); break;
		default: $this->_cPtr=new_StringVector($n);
		}
	}

	function size() {
		return StringVector_size($this->_cPtr);
	}

	function capacity() {
		return StringVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		StringVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		StringVector_clear($this->_cPtr);
	}

	function push($x) {
		StringVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return StringVector_is_empty($this->_cPtr);
	}

	function pop() {
		return StringVector_pop($this->_cPtr);
	}

	function get($i) {
		return StringVector_get($this->_cPtr,$i);
	}

	function set($i,$val) {
		StringVector_set($this->_cPtr,$i,$val);
	}
}

class StringVector2d {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_std__vectorT_std__string_t_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringVector2d(); break;
		default: $this->_cPtr=new_StringVector2d($n);
		}
	}

	function size() {
		return StringVector2d_size($this->_cPtr);
	}

	function capacity() {
		return StringVector2d_capacity($this->_cPtr);
	}

	function reserve($n) {
		StringVector2d_reserve($this->_cPtr,$n);
	}

	function clear() {
		StringVector2d_clear($this->_cPtr);
	}

	function push($x) {
		StringVector2d_push($this->_cPtr,$x);
	}

	function is_empty() {
		return StringVector2d_is_empty($this->_cPtr);
	}

	function pop() {
		$r=StringVector2d_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function get($i) {
		$r=StringVector2d_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function set($i,$val) {
		StringVector2d_set($this->_cPtr,$i,$val);
	}
}

class OcrCharVariantVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_se__smartid__OcrCharVariant_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_OcrCharVariantVector(); break;
		default: $this->_cPtr=new_OcrCharVariantVector($n);
		}
	}

	function size() {
		return OcrCharVariantVector_size($this->_cPtr);
	}

	function capacity() {
		return OcrCharVariantVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		OcrCharVariantVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		OcrCharVariantVector_clear($this->_cPtr);
	}

	function push($x) {
		OcrCharVariantVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return OcrCharVariantVector_is_empty($this->_cPtr);
	}

	function pop() {
		$r=OcrCharVariantVector_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new OcrCharVariant($r);
		}
		return $r;
	}

	function get($i) {
		$r=OcrCharVariantVector_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new OcrCharVariant($r);
		}
		return $r;
	}

	function set($i,$val) {
		OcrCharVariantVector_set($this->_cPtr,$i,$val);
	}
}

class OcrCharVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_se__smartid__OcrChar_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_OcrCharVector(); break;
		default: $this->_cPtr=new_OcrCharVector($n);
		}
	}

	function size() {
		return OcrCharVector_size($this->_cPtr);
	}

	function capacity() {
		return OcrCharVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		OcrCharVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		OcrCharVector_clear($this->_cPtr);
	}

	function push($x) {
		OcrCharVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return OcrCharVector_is_empty($this->_cPtr);
	}

	function pop() {
		$r=OcrCharVector_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new OcrChar($r);
		}
		return $r;
	}

	function get($i) {
		$r=OcrCharVector_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new OcrChar($r);
		}
		return $r;
	}

	function set($i,$val) {
		OcrCharVector_set($this->_cPtr,$i,$val);
	}
}

class MatchResultVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_se__smartid__MatchResult_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_MatchResultVector(); break;
		default: $this->_cPtr=new_MatchResultVector($n);
		}
	}

	function size() {
		return MatchResultVector_size($this->_cPtr);
	}

	function capacity() {
		return MatchResultVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		MatchResultVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		MatchResultVector_clear($this->_cPtr);
	}

	function push($x) {
		MatchResultVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return MatchResultVector_is_empty($this->_cPtr);
	}

	function pop() {
		$r=MatchResultVector_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new MatchResult($r);
		}
		return $r;
	}

	function get($i) {
		$r=MatchResultVector_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new MatchResult($r);
		}
		return $r;
	}

	function set($i,$val) {
		MatchResultVector_set($this->_cPtr,$i,$val);
	}
}

class SegmentationResultVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_se__smartid__SegmentationResult_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_SegmentationResultVector(); break;
		default: $this->_cPtr=new_SegmentationResultVector($n);
		}
	}

	function size() {
		return SegmentationResultVector_size($this->_cPtr);
	}

	function capacity() {
		return SegmentationResultVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		SegmentationResultVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		SegmentationResultVector_clear($this->_cPtr);
	}

	function push($x) {
		SegmentationResultVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return SegmentationResultVector_is_empty($this->_cPtr);
	}

	function pop() {
		$r=SegmentationResultVector_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new SegmentationResult($r);
		}
		return $r;
	}

	function get($i) {
		$r=SegmentationResultVector_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new SegmentationResult($r);
		}
		return $r;
	}

	function set($i,$val) {
		SegmentationResultVector_set($this->_cPtr,$i,$val);
	}
}

class StringCollection {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($arg1=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_std__mapT_std__string_std__string_t') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringCollection(); break;
		default: $this->_cPtr=new_StringCollection($arg1);
		}
	}

	function size() {
		return StringCollection_size($this->_cPtr);
	}

	function clear() {
		StringCollection_clear($this->_cPtr);
	}

	function get($key) {
		return StringCollection_get($this->_cPtr,$key);
	}

	function set($key,$x) {
		StringCollection_set($this->_cPtr,$key,$x);
	}

	function del($key) {
		StringCollection_del($this->_cPtr,$key);
	}

	function has_key($key) {
		return StringCollection_has_key($this->_cPtr,$key);
	}

	function is_empty() {
		return StringCollection_is_empty($this->_cPtr);
	}
}

class StringVectorCollection {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($arg1=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_std__mapT_std__string_std__vectorT_std__string_t_t') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringVectorCollection(); break;
		default: $this->_cPtr=new_StringVectorCollection($arg1);
		}
	}

	function size() {
		return StringVectorCollection_size($this->_cPtr);
	}

	function clear() {
		StringVectorCollection_clear($this->_cPtr);
	}

	function get($key) {
		$r=StringVectorCollection_get($this->_cPtr,$key);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function set($key,$x) {
		StringVectorCollection_set($this->_cPtr,$key,$x);
	}

	function del($key) {
		StringVectorCollection_del($this->_cPtr,$key);
	}

	function has_key($key) {
		return StringVectorCollection_has_key($this->_cPtr,$key);
	}

	function is_empty() {
		return StringVectorCollection_is_empty($this->_cPtr);
	}
}

class ImageFieldCollection {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($arg1=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_std__mapT_std__string_se__smartid__ImageField_t') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_ImageFieldCollection(); break;
		default: $this->_cPtr=new_ImageFieldCollection($arg1);
		}
	}

	function size() {
		return ImageFieldCollection_size($this->_cPtr);
	}

	function clear() {
		ImageFieldCollection_clear($this->_cPtr);
	}

	function get($key) {
		$r=ImageFieldCollection_get($this->_cPtr,$key);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new ImageField($r);
		}
		return $r;
	}

	function set($key,$x) {
		ImageFieldCollection_set($this->_cPtr,$key,$x);
	}

	function del($key) {
		ImageFieldCollection_del($this->_cPtr,$key);
	}

	function has_key($key) {
		return ImageFieldCollection_has_key($this->_cPtr,$key);
	}

	function is_empty() {
		return ImageFieldCollection_is_empty($this->_cPtr);
	}
}

class StringFieldCollection {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($arg1=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_std__mapT_std__string_se__smartid__StringField_t') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringFieldCollection(); break;
		default: $this->_cPtr=new_StringFieldCollection($arg1);
		}
	}

	function size() {
		return StringFieldCollection_size($this->_cPtr);
	}

	function clear() {
		StringFieldCollection_clear($this->_cPtr);
	}

	function get($key) {
		$r=StringFieldCollection_get($this->_cPtr,$key);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringField($r);
		}
		return $r;
	}

	function set($key,$x) {
		StringFieldCollection_set($this->_cPtr,$key,$x);
	}

	function del($key) {
		StringFieldCollection_del($this->_cPtr,$key);
	}

	function has_key($key) {
		return StringFieldCollection_has_key($this->_cPtr,$key);
	}

	function is_empty() {
		return StringFieldCollection_is_empty($this->_cPtr);
	}
}

class QuadrangleCollection {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($arg1=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_std__mapT_std__string_se__smartid__Quadrangle_t') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_QuadrangleCollection(); break;
		default: $this->_cPtr=new_QuadrangleCollection($arg1);
		}
	}

	function size() {
		return QuadrangleCollection_size($this->_cPtr);
	}

	function clear() {
		QuadrangleCollection_clear($this->_cPtr);
	}

	function get($key) {
		$r=QuadrangleCollection_get($this->_cPtr,$key);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Quadrangle($r);
		}
		return $r;
	}

	function set($key,$x) {
		QuadrangleCollection_set($this->_cPtr,$key,$x);
	}

	function del($key) {
		QuadrangleCollection_del($this->_cPtr,$key);
	}

	function has_key($key) {
		return QuadrangleCollection_has_key($this->_cPtr,$key);
	}

	function is_empty() {
		return QuadrangleCollection_is_empty($this->_cPtr);
	}
}

class IntegratedFieldStateCollection {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_php7SmartIdEngine_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($arg1=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_std__mapT_std__string_se__smartid__IntegratedFieldState_t') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_IntegratedFieldStateCollection(); break;
		default: $this->_cPtr=new_IntegratedFieldStateCollection($arg1);
		}
	}

	function size() {
		return IntegratedFieldStateCollection_size($this->_cPtr);
	}

	function clear() {
		IntegratedFieldStateCollection_clear($this->_cPtr);
	}

	function get($key) {
		$r=IntegratedFieldStateCollection_get($this->_cPtr,$key);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IntegratedFieldState($r);
		}
		return $r;
	}

	function set($key,$x) {
		IntegratedFieldStateCollection_set($this->_cPtr,$key,$x);
	}

	function del($key) {
		IntegratedFieldStateCollection_del($this->_cPtr,$key);
	}

	function has_key($key) {
		return IntegratedFieldStateCollection_has_key($this->_cPtr,$key);
	}

	function is_empty() {
		return IntegratedFieldStateCollection_is_empty($this->_cPtr);
	}
}


?>

<?php
namespace app\models\reference;

use app\components\base\type\Reference;
use app\components\ValidationRules;
use app\models\enum\PriceParsedStatus;
use app\models\enum\Status;

/**
 * Class BrandFilter
 *
 * @package app\models\reference
 *
 * @property Brand brand
 */
class BrandFilter extends Reference
{
    public static $brandsFilters = [
        'all'       => [],
        'filters'   => []
    ];

    public static $_cachedFilter = [
        'all'       => [],
        'filters'   => []
    ];
    /**
     * @inheritdoc
     */
    public static function getSingularNominativeName()
    {
        return 'Фильтр бренда';
    }

    /**
     * @inheritdoc
     */
    public static function getPluralNominativeName()
    {
        return 'Фильтр брендов';
    }
    /**
     * Предопределить значения импортируемых колонок
     * @return array
     */
    public function fileImportPresetColumns() {
        return [
            'id'
        ];
    }

    public function excludeFieldsFileImportColumns()
    {
        return [];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return array_merge(parent::rules(),
            [
            ]
        );
    }

    public function beforeValidate()
    {
        $this->name = mb_strtoupper($this->name);
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        $this->name = mb_strtoupper($this->name);
        return parent::beforeSave($insert);
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return array_merge(
            parent::attributeLabels(),
            [
            ]
        );
    }
    public function excludeFieldsUpdate() {
        return [];
    }

    public function excludeFieldsCreate() {
        return [];
    }

    /**
     * @inheritdoc
     */
    public static function relations()
    {
        return array_merge(parent::relations(), [
        ]);
    }
    /**
     * @inheritdoc
     */
    public function crudIndexColumns() {
        return array_merge(parent::crudIndexColumns(),[
            'name',
        ]);
    }

    /**
     * @param $brandName
     * @param bool $all
     * @return mixed
     */
    public static function filter($brandName, $all = false) {
        $subCache = $all ? 'all' : 'filters';
        if (isset(self::$_cachedFilter[$subCache][$brandName])) {
            return self::$_cachedFilter[$subCache][$brandName];
        }
        $brandId    = false;
        $upperName  = strtoupper($brandName);
        foreach (self::brandsFilters($all) as $id => $brandsFilter) {
            if (preg_match('/(^|\s)('.$brandsFilter.')($|\s)/iu', $upperName)) {
                $brandId = $id;
                break;
            }
        }
        self::$_cachedFilter[$subCache][$brandName] = $brandId;
        return self::$_cachedFilter[$subCache][$brandName];
    }

    /**
     * @param bool $all
     * @return mixed
     */
    public static function brandsFilters($all = false) {
        $subCache = $all ? 'all' : 'filters';
        if (empty( self::$brandsFilters[$subCache])) {
            if ($all) {
                self::$brandsFilters[$subCache] = Brand::find()
                    ->select('name')
                    ->andWhere([
                        'status_id' => Status::STATUS_ACTIVE
                    ])
                    ->indexBy('id')
                    ->column();
            } else {
                self::$brandsFilters[$subCache] = BrandFilter::find()
                    ->select('name')
                    ->andWhere([
                        'status_id' => Status::STATUS_ACTIVE
                    ])
                    ->indexBy('id')
                    ->column();
            }
            foreach ( self::$brandsFilters[$subCache] as $i => $brandsFilter) {
                self::$brandsFilters[$subCache][$i] =  strtoupper(trim(preg_replace('/[^a-zA-Z0-9а-яА-Я]+/iu','|', $brandsFilter),'|'));
            }
        }
        return  self::$brandsFilters[$subCache];
    }
}
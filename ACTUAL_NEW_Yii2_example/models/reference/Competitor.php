<?php
namespace app\models\reference;

use app\components\base\type\Reference;
use app\components\DateTime;
use app\models\enum\Source;
use app\models\pool\PriceCalculated;
use app\models\pool\PriceParsed;
use app\models\pool\PriceRefined;
use app\validators\TimeSpanValidator;
use Cassandra\Date;

/**
 * Конкурент
 * Class Competitor
 *
 * @package app\models\reference
 *
 * @property boolean is_marketplace
 * @property integer price_lifetime
 *
 * @property Project[]              projects
 * @property CompetitorShopDomain[] competitorShopDomains  Домены магазинов',
 * @property CompetitorShopName[]   competitorShopNames Названия магазинов',
 * @property CompetitorShopIndex[]  competitorShopIndexes YMID магазинов',
]
 */
class Competitor extends Reference
{
    /**
     * @inheritdoc
     */
    public static function getSingularNominativeName()
    {
        return 'Конкурент';
    }

    /**
     * @inheritdoc
     */
    public static function getPluralNominativeName()
    {
        return 'Конкурнеты';
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return array_merge(
            parent::attributeLabels(),
            [
                'is_marketplace' => 'Торговая площадка',
                'projects'          => 'Проекты',
                'competitorShopDomains' => 'Домены магазинов',
                'competitorShopNames' => 'Названия магазинов',
                'competitorShopIndexes' => 'YMID магазинов',
                'priceLifetime' => 'Срок актуальности собранных цен'
            ]
        );
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return array_merge(parent::rules(),
            [
                [['name'], 'unique', 'targetAttribute' => ['name']],
                [['is_marketplace'], 'boolean'],
                [['price_lifetime'], 'integer'],
                [['priceLifetime'] , TimeSpanValidator::className()],
            ]
        );
    }

    /**
     * @inheritdoc
     */
    public function crudIndexColumns() {
        return array_merge(parent::crudIndexColumns(),[
            'name',
            'id',
            'shopNames' => [
                'label' => \app\models\reference\CompetitorShopName::getPluralNominativeName(),
                'format' => 'raw',
                'value' => function($model) {
                    /** @var \app\models\reference\Competitor $model */
                    return join("<br/>",$model->getCompetitorShopNames()->select('name')->column());
                }
            ],
            'shopIndexes' => [
                'label' => \app\models\reference\CompetitorShopIndex::getPluralNominativeName(),
                'format' => 'raw',
                'value' => function($model) {
                    /** @var \app\models\reference\Competitor $model */
                    return join("<br/>",$model->getCompetitorShopIndexes()->select('name')->column());
                }
            ],
            'shopDomains' => [
                'label' => \app\models\reference\CompetitorShopDomain::getPluralNominativeName(),
                'format' => 'raw',
                'value' => function($model) {
                    /** @var \app\models\reference\Competitor $model */
                    return join("<br/>",$model->getCompetitorShopDomains()->select('name')->column());
                }
            ]
        ]);
    }

    /**
     * @inheritdoc
     */
    public static function relations() {
        return array_merge(parent::relations(),[
            'competitorShopDomains',
            'competitorShopNames',
            'competitorShopIndexes',
            'projects',
        ]);
    }

    public function delete()
    {

        CompetitorShopIndex::deleteAll([
            'competitor_id' => $this->id
        ]);
        CompetitorShopDomain::deleteAll([
            'competitor_id' => $this->id
        ]);
        CompetitorShopName::deleteAll([
            'competitor_id' => $this->id
        ]);
        CompetitorItem::deleteAll([
            'competitor_id' => $this->id
        ]);
        ProjectCompetitorBrand::deleteAll([
            'competitor_id' => $this->id
        ]);
        ProjectCompetitorCategory::deleteAll([
            'competitor_id' => $this->id
        ]);
        ProjectCompetitor::deleteAll([
            'competitor_id' => $this->id
        ]);
        return parent::delete(); // TODO: Change the autogenerated stub
    }


    /**
     * @param array $config Конфиг
     */
    public function setupShopIndexes($config) {
        CompetitorShopIndex::deleteAll([
            'competitor_id' => $this->id
        ]);
        if (is_array($config)) {
            foreach ($config as $shopIndex) {
                $competitorShopIndex                = new CompetitorShopIndex();
                $competitorShopIndex->competitor_id = $this->id;
                $competitorShopIndex->name          = $shopIndex['name'];
                $competitorShopIndex->source_id     = Source::SOURCE_YANDEX_MARKET;
                $competitorShopIndex->save();
            }
        }
    }

    /**
     * @param array $config Конфиг
     */
    public function setupShopDomains($config) {
        CompetitorShopDomain::deleteAll([
            'competitor_id' => $this->id
        ]);
        if (is_array($config)) {
            foreach ($config as $shopDomain) {
                $competitorShopDomain                   = new CompetitorShopDomain();
                $competitorShopDomain->competitor_id    = $this->id;
                $competitorShopDomain->name             = $shopDomain['name'];
                $competitorShopDomain->save();
            }
        }
    }

    /**
     * @param array $config Конфиг
     */
    public function setupShopNames($config) {
        CompetitorShopName::deleteAll([
            'competitor_id' => $this->id
        ]);
        if (is_array($config)) {
            foreach ($config as $shopName) {
                $competitorShopName                 = new CompetitorShopName();
                $competitorShopName->competitor_id  = $this->id;
                $competitorShopName->name           = $shopName['name'];
                $competitorShopName->save();
            }
        }
    }

    public function getRelevanceDate() {
        $relevanceDate = null;
        if ($this->price_lifetime) {
            $relevanceDate = strtotime('-' . $this->price_lifetime . ' seconds', (new DateTime())->getTimestamp());
        }
        return $relevanceDate;
    }

    /**
     * @return string
     */
    public function getPriceLifetime() {
        return TimeSpanValidator::integer2timeSpan($this->price_lifetime);
    }

    /**
     * @param $value
     * @return int
     */
    public function setPriceLifetime($value) {
        $this->price_lifetime = TimeSpanValidator::timeSpan2integer($value);
    }
   
    /**
     * Проекты в которых задействован конкурент
     * @return Project[]
     */
    public function getProjects()
    {
        return $this->hasMany(Project::className(), ['id' => 'project_id'])->via('projectCompetitors');
    }

    /**
     * Связь с проектами
     * @return ProjectCompetitor[]
     */
    public function getProjectCompetitors()
    {
        return $this->hasMany(ProjectCompetitor::className(), ['project_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCompetitorShopNames()
    {
        return $this->hasMany(CompetitorShopName::className(), ['competitor_id' => 'id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCompetitorShopIndexes()
    {
        return $this->hasMany(CompetitorShopIndex::className(), ['competitor_id' => 'id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCompetitorShopDomains()
    {
        return $this->hasMany(CompetitorShopDomain::className(), ['competitor_id' => 'id']);
    }
    
}
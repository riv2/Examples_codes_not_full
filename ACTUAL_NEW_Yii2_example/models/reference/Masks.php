<?php
namespace app\models\reference;

use app\components\base\type\Reference;
use app\components\ValidationRules;
use app\models\cross\ParsingProjectMasks;
use app\models\enum\Source;
use app\models\enum\Status;
use yii;
use yii\base\InvalidArgumentException;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;

/**
 * Class Masks
 * @package app\models\reference
 *
 * @property string domain
 * @property string test_urls
 *
 * @property string masks
 * @property array masksData
 *
 * @property ParsingProject[] parsingProject
 *
 */
class Masks extends Reference
{

    public $phantom_required;

    /**
     * Настройки для передачи роботу
     * @return array
     */
    public function getSettings() {
        return [
            'id'                          => $this->id,
            'name'                        => $this->name,
            'domain'                      => $this->domain,
            'masks'                       => $this->masks,
        ];
    }


    public function getTestUrls() {
        return $this->test_urls
            ? explode("\n", str_replace("\r", "", $this->test_urls))
            : CompetitorItem::find()
                ->andWhere(['ilike', 'url', $this->domain])
                ->andWhere(['status_id' => Status::STATUS_ACTIVE])
                ->limit(10)
                ->select('url')
                ->column();
    }


    /**
     * Типы масок
     * @param null $key
     * @return array|mixed|null
     */
    public static function getParsingMasksNames($key = null) {
        $names = [
            'price'                     => 'Цена',
            'competitor_item_sku'       => 'Артикул/YMID товара',
            'competitor_item_name'      => 'Наименование',
            'competitor_shop_name'      => 'Магазин',
            'competitor_item_count'     => 'Кол-во',
            'competitor_item_rubric1'   => 'Рубрика1',
            'competitor_item_rubric2'   => 'Рубрика2',
            'competitor_item_brand'     => 'Бренд',
            'delivery'                  => 'Доставка',
        ];
        if ($key) {
            if (isset($names[$key])) {
                return $names[$key];
            } else {
                return null;
            }
        }
        return $names;
    }
    
    /**
     * @inheritdoc
     */
    public static function getSingularNominativeName()
    {
        return 'Маски';
    }

    /**
     * @inheritdoc
     */
    public static function getPluralNominativeName()
    {
        return 'Маски';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return array_merge(
            parent::rules(),
            [
                [['test_urls'], 'safe'],
                [['domain'], 'string'],
                [['masks'], 'safe'],
            ]
        );
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return ArrayHelper::merge(
            parent::attributeLabels(),
            [
                'domain'                     => 'Домен',
                'test_urls'                  => 'Тестовые урлы',
                'masks'                      => 'Маски',
            ]
        );
    }

    /**
     * @return array|mixed
     */
    public function getMasksData() {
        $json = null;
        try {
            $json = Json::decode($this->masks, true);
        } catch (InvalidArgumentException $e) {
            throw new \Error('Invalid Mask '.print_r($this->masks, true));
        }
        return $this->masks ?  $json: [];
    }

    /**
     * @param $array
     */
    public function setMasksData($array) {
        $this->masks = Json::encode($array);
    }

     /**
     * @param $array
     */
    public function setTestUrls($array) {
        $this->test_urls = join("\n", $array);
    }


    /**
     * @inheritdoc
     */
    public function crudIndexColumns()
    {
        return array_merge(
            parent::crudIndexColumns(),
            [
                'name',
                'domain'
            ]
        );
    }


    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        foreach ($this->parsingProject as $pp) {
            $pp->save();
        }
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParsingProjectMasks() {
        return $this->hasMany(ParsingProjectMasks::className(), ['masks_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParsingProject() {
        return $this->hasMany(ParsingProject::className(), ['id' => 'parsing_project_id'])->via('parsingProjectMasks');
    }
}
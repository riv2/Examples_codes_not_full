<?php
namespace app\controllers\api;

use app\components\BigJsonSerialize;
use app\models\enum\HoradricCubeStatus;
use app\models\reference\CompetitorItem;
use app\models\register\HoradricCube;
use netis\crud\db\ActiveQuery;
use yii;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\web\Controller;

class ExportController extends Controller
{

    /**
     * @inheritdoc
     */
    public function actions()
    {
        $this->enableCsrfValidation = false;
        
        $actions = [
            'ym-urls',
            'competitor-urls',
        ];

//        $entities = Entity::getEnumArray();
//
//        foreach ($entities as $entity) {
//            $actions[$entity['action']] = [
//                'class'         => 'app\components\api\actions\ImportAction',
//                'modelClass'    => $entity['class_name'],
//            ];
//        }
        
        return $actions;
    }
    

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
    
    /**
     * @inheritdoc
     */
    public function behaviors()
    {

        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow'     => true,
                    ],
                ]
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'ym-urls' => ['get','post'],
                    'competitor-urls' => ['get','post'],
                ],
            ],
        ];
    }


    /**
     * Обратная совместимость
     * @deprecated
     */
    public function actionCompetitorUrls($id) {
        return Yii::$app->runAction('api/cd/competitor-urls',['id' => $id]);
    }

    /**
     * Обратная совместимость
     * @deprecated 
     */
    public function actionYmUrls($id) {
        return Yii::$app->runAction('api/cd/ym-urls',['id' => $id]);
    }

    public function actionCompetitorItems() {
        $ci = CompetitorItem::find()
            ->orderBy([
                'competitor_id' => SORT_ASC,
                'id' => SORT_ASC
            ])
            ->select([
                'id',
                'competitor_id',
                'item_id',
                'competitor_item_name',
                'sku',
                'url',
                'price',
                'price_updated_at',
                'errors_count',
                'error_last_date',
                'created_at',
                'updated_at',
            ]);

        $this->applyRequestParams($ci);

        Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
        Yii::$app->response->send();
        header('Content-Type: application/json; charset=utf-8');

        $serializer = new BigJsonSerialize();

        foreach ($ci->asArray()->batch(100) as $chunk) {
            $serializer->serializeChunk($chunk);
        }

        $serializer->end();

        return null;
    }

    public function actionHoradricCube() {
        $ci = HoradricCube::find()
            ->alias('hc')
            ->innerJoin([
                'hcs'=>HoradricCubeStatus::tableName()
            ], 'hc.horadric_cube_status_id = hcs.id')
            ->orderBy([
                'hc.created_at' => SORT_ASC,
            ])
            ->select([
                'hc.id',
                'competitor_id',
                'item_id',
                'brand_id',
                'horadric_cube_status_id',
                'hcStatus' => 'hcs.name',
                'created_at',
                'updated_at',
                'competitor_item_id',
                'competitor_item_name',
                'competitor_item_price',
                'competitor_item_url',
                'competitor_item_sku',
                'vi_item_name',
                'vi_item_price',
                'vi_item_url',
                'vi_item_sku',
                'vi_item_id',
                'vi_item_brand_name',
                'vi_item_in_msk',
                'vi_item_matrix',
                'percent',
                'filter_reason',
                'sales_rank',
                'predict',
            ]);


        $this->applyRequestParams($ci, ['hcStatus' => 'hcs.name']);


        Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
        Yii::$app->response->send();
        header('Content-Type: application/json; charset=utf-8');

        $serializer = new BigJsonSerialize();

        foreach ($ci->asArray()->batch(100) as $chunk) {
            $serializer->serializeChunk($chunk);
        }

        $serializer->end();

        return null;
    }


    private function applyRequestParams(ActiveQuery $query, $morph = []) {
        $data   = $_REQUEST;
        $offset = null;
        $limit  = null;

        if (isset($data['offset'])) {
            $offset = $data['offset'];
            unset($data['offset']);
        }

        if (isset($data['limit'])) {
            $limit = $data['limit'];
            unset($data['limit']);
        }

        foreach ($data as $key => $value) {
            if ($value === '!') {
                $query->andWhere(['not',[$key => null]]);
                continue;
            }

            if (strpos($value,',')) {
                $value = explode(',',$value);
            }
            if (isset($morph[$key])) {
                $key = $morph[$key];
            }
            $query->andFilterWhere([$key => $value]);
        }

        if ($offset) {
            $query->offset($offset);
        }

        if ($limit) {
            $query->limit($limit);
        }
    }


    public function actionIndex()
    {
        return "api";
    }

}
<?php
namespace app\controllers\api;

use app\components\base\Entity;
use app\components\DateTime;
use app\models\enum\ParsingStatus;
use app\models\enum\TaskStatus;
use app\models\pool\PriceRefined;
use app\models\pool\Screenshot;
use app\models\reference\Brand;
use app\models\reference\CompetitorItem;
use app\models\reference\Item;
use app\models\reference\Project;
use app\models\reference\ProjectItem;
use app\models\register\Parsing;
use app\models\pool\ParsingBuffer;
use app\models\register\Task;
use yii;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\Json;
use yii\web\Controller;

/**
 * @deprecated
 *
 * Этот класс устарел, сидит тут для совместимости с возможно еще используемыми Женей Токаревым Content Downloader
 * Class CdController
 * @package app\controllers\api
 */
class CdController extends Controller
{

    /**
     * @inheritdoc
     */
    public function actions()
    {

        $this->enableCsrfValidation = false;
        $entities = Entity::getEnumArray();
        
        $actions = [];

        foreach ($entities as $entity) {
            $actions[$entity['action']] = [
                'class'         => 'app\components\api\actions\ImportAction',
                'modelClass'    => $entity['class_name'],
            ];
        }
        
        return $actions;
    }

    /**
     * @inheritdoc
     */
    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
    
    /**
     * @inheritdoc
     */
    public function behaviors()
    {

        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow'     => true,
                    ],
                ]
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'parsed'                => ['get','post'],
                    'parsing-finished'      => ['get','post'],
                    'parsing-started'       => ['get','post'],
                    'parsing-failed'        => ['get','post'],
                ],
            ],
        ];
    }

    /**
     * @return string
     */
    public function actionParsed()
    {
        $parsingBuffer              = new ParsingBuffer;
        $parsingBuffer->data        = array_merge(Yii::$app->getRequest()->get(), Yii::$app->getRequest()->post());
        $parsingBuffer->created_at  = new DateTime();
        $parsingBuffer->save(false);
        return "ok";
    }

    /**
     * @return string
     * @throws \Exception
     */
    public function actionScreenshot()
    {
        $request = array_merge(Yii::$app->getRequest()->get(), Yii::$app->getRequest()->post());
        $screenshot = new Screenshot();
        $screenshot->setAttributes($request);
        $screenshot->save();
        return "ok";
    }

    /**
     * @param string $project_id
     * @param string $sku
     * @return string
     * @throws \Exception
     */
    public function actionProjectSkuExists($project_id, $sku)
    {
        if (!$sku) {
            return null;
        }
        $exists = ProjectItem::find()
            ->alias('pi')
            ->joinWith('item')
            ->andWhere([
                'pi.project_id'     => $project_id,
                Item::tableName().'.sku'             => preg_replace("/\D/", "", $sku),
            ])
            ->exists();
        return $exists ? 1 : null;
    }


    /**
     * @param string $url
     * @return string
     * @throws \Exception
     */
    public function actionCompetitorUrlExists($url)
    {
        $url = preg_replace('/^https?:\/\//i', '', $url);
        $exists = CompetitorItem::find()
            ->andWhere(['like', 'url' , $url ])
            ->exists();
        return $exists ? 1 : null;
    }


    /**
     * @param $id
     * @return string
     * @throws yii\web\NotFoundHttpException
     */
    public function actionCompetitorUrls($id) {
        $project = Project::findOne($id);

        if (!$project) {
            throw new yii\web\NotFoundHttpException('Проект не найден');
        }
        
        Yii::$app->response->format = yii\web\Response::FORMAT_RAW;

        $find = CompetitorItem::find()
            ->alias('ci')
            ->innerJoin(['i' => Item::tableName()],'i.id = ci.item_id')
            ->innerJoin(['pi' => $project->getProjectItems()], 'ci.item_id = pi.item_id')
            ->select(new yii\db\Expression("ci.url || '[PARAM]:ID=' || i.id || '$' || 'RRC=' || round(COALESCE(i.price_recommended_retail,0)) || '$' || 'must=' || COALESCE(i.pricing_must_be,'') || '$' || 'dont=' || COALESCE(i.pricing_dont_be,'') || '$' as curl"))
            ->andWhere([
                'ci.competitor_id' => $project->getProjectCompetitors()->select('competitor_id')->column()
            ])
            ->andWhere(['not',
                ['ci.url' => null]
            ])
        ;

        if ($project->supply_price_threshold) {
            $find->andWhere(['>', 'i.price_supply', $project->supply_price_threshold]);
        }

        $itemUrls = $find->column();

        return join("\n", $itemUrls);
    }

    /**
     * @param $id
     * @return string
     * @throws yii\web\NotFoundHttpException
     */
    public function actionYmUrls($id) {
        $project = Project::findOne($id);

        if (!$project) {
            throw new yii\web\NotFoundHttpException('Проект не найден');
        }

        Yii::$app->response->format = yii\web\Response::FORMAT_RAW;

        $find = Item::find()
            ->alias('i')
            ->innerJoin(['pi' => ProjectItem::tableName()],'i.id = pi.item_id')
            ->select(new yii\db\Expression("i.ym_url || '[PARAM]:ID=' || i.id || '$' || 'RRC=' || round(COALESCE(i.price_recommended_retail,0)) || '$' || 'must=' || COALESCE(i.pricing_must_be,'') || '$' || 'dont=' || COALESCE(i.pricing_dont_be,'') || '$' as curl"))
            ->andWhere([
                'pi.project_id' => $id
            ])
            ->andWhere(['not',
                ['i.ym_url' => null]
            ]);

        if ($project->supply_price_threshold) {
            $find->andWhere(['>', 'price_supply', $project->supply_price_threshold]);
        }

        $itemUrls = $find->column();

        return join("\n", $itemUrls);
    }

    /**
     * @param $id
     * @return string
     * @throws yii\web\NotFoundHttpException
     */
    public function actionScreenshotUrls($id) {
        $project = Project::findOne($id);

        if (!$project) {
            throw new yii\web\NotFoundHttpException('Проект не найден');
        }

        Yii::$app->response->format = yii\web\Response::FORMAT_RAW;

        $find = ProjectItem::find()
            ->distinct()
            ->alias('pi')
            ->innerJoin(['ci' => CompetitorItem::tableName()], "pi.item_id = ci.item_id AND ci.url IS NOT NULL")
            ->innerJoin(['pr' => PriceRefined::tableName()],"pr.item_id = pi.item_id AND pr.competitor_id = ci.competitor_id AND pr.price > 1000 AND pr.extracted_at > NOW() - INTERVAL '".$project->price_relevance_time_span." seconds'")
            ->innerJoin(['i' => Item::tableName()],'i.id = pr.item_id AND i.price_recommended_retail > pr.price')
            ->innerJoin(['b' => Brand::tableName()],'b.id = i.brand_id')
            ->andWhere([
                'ci.competitor_id' => $project->getProjectCompetitors()->select('competitor_id')->column()
            ])
            ->andWhere([
                 'pi.project_id' => $id
            ])
            ->select(new yii\db\Expression("ci.url || '[PARAM]:ID=' || i.id || '$' || 'RRC=' || round(COALESCE(i.price_recommended_retail, 0)) || '$' || 'brand=' || b.name || '$' || 'price=' || COALESCE(pr.price, 0) || '$' || 'competitor_id=' || COALESCE(ci.competitor_id::varchar, '') || '$' as curl, ci.competitor_id as competitor_id, ci.item_id as item_id, i.brand_id as brand_id "));

        $limits = [];

        $itemUrls = $find ->asArray()->all();

        $sort = false;
        $sorted = [];
        $output = [];

        foreach ($itemUrls as $itemUrl) {
            $key = $itemUrl['competitor_id'].$itemUrl['brand_id'];
            if (!isset($limits[$key])) {
                $limits[$key] = 0;
            }
            $limits[$key]++;
            if ($limits[$key] <= 5) {
                if ($sort) {
                    if (!isset($sorted[$itemUrl['competitor_id']])) {
                        $sorted[$itemUrl['competitor_id']] = [];
                    }
                    if (!isset($sorted[$itemUrl['competitor_id']][$itemUrl['brand_id']])) {
                        $sorted[$itemUrl['competitor_id']][$itemUrl['brand_id']] = [];
                    }
                    $sorted[$itemUrl['competitor_id']][$itemUrl['brand_id']][] = $itemUrl['curl'];
                } else {
                    $output[] = $itemUrl['curl'];
                }
            }
        }

        if ($sort) {
            $output = [];
            foreach ($sorted as $competitor) {
                foreach ($competitor as $brand) {
                    foreach ($brand as $url) {
                        $output[] = $url;
                    }
                }
            }
        }


        return join("\n", $output);
    }
}